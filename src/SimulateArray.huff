/**
 *  SUM_ARRAY HUFF EXERCISE
 *
 * In this puzzle, the task is to simulate an array in Huff using the "exact" storage pattern as solidity. Expected functions can;
 *      - Push numbers onto a array,
 *      - Pop the last index from the array,
 *      - View what's stored at an index,
 *      - Gets the length of the array,
 *      - Write to an index if it is valid.
 *
 *      - Writes and reads outside of length revert.
 *      - Popping off a zero length array reverts.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function pushh(uint256 num) payable returns()
#define function popp() payable returns()
#define function read(uint256 index) payable returns(uint256)
#define function length() payable returns(uint256)
#define function write(uint256 index, uint256 num) payable returns()

#define error OutOfBounds()
#define error ZeroArray()

#define macro MAIN() = takes(0) returns(0) {
    0x00 calldataload 0xe0 shr
    dup1 __FUNC_SIG(length) eq LENGTH jumpi
    dup1 __FUNC_SIG(pushh) eq PUSHH jumpi
    dup1 __FUNC_SIG(write) eq WRITE jumpi
    dup1 __FUNC_SIG(popp) eq POPP jumpi
     __FUNC_SIG(read) eq READ jumpi
    0x00 0x00 revert

PUSHH:
    __PUSHH()

WRITE:
    __WRITE()

POPP:
    __POPP()

READ:
    __READ()

LENGTH:
    __LEN()
    0x00 mstore
    0x20 0x00 return
}

#define macro __LEN() = takes(0) returns(1) {
    0x00 sload
}

#define macro __POPP() = takes(0) returns(0) {
    __LEN()                         // [len]
    dup1 iszero FAIL jumpi          // [len]
    0x01 swap1 sub                  // [len-1]
    0x00 sstore
    stop

FAIL:
    __ERROR(ZeroArray) 0x00 mstore
    0x04 0x00 revert
}

#define macro __WRITE() = takes(0) returns(0) {
    __LEN()                         // [len]
    0x04 calldataload               // [index, len]
    lt __WRITE_0 jumpi

    __ERROR(OutOfBounds) 0x00 mstore
    0x04 0x00 revert

__WRITE_0:
    0x24 calldataload               // [num]
    0x04 calldataload               // [index, num]
    0x20 add                        // [pointer, num]
    sstore
    stop
}

#define macro __PUSHH() = takes(0) returns(0) {
    __LEN()                         // [len]
    dup1                            // [len, len]

    0x04 calldataload               // [num, len, len]
    swap1 0x20 add sstore           // [len]
    0x01 add 0x00 sstore

    stop
}

#define macro __READ() = takes(0) returns(0) {
    __LEN()                         // [len]

    0x04 calldataload               // [index, len]
    lt __READ_0 jumpi

    __ERROR(OutOfBounds) 0x00 mstore
    0x04 0x00 revert

__READ_0:
    0x04 calldataload
    0x20 add sload
    0x00 mstore
    0x20 0x00 return
}

// vim: ft=c
